{"version":3,"file":"jsbi-umd.js","sources":["../tsc-out/jsbi.mjs"],"sourcesContent":["// Copyright 2018 Google Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the “License”);\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// <https://apache.org/licenses/LICENSE-2.0>.\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an “AS IS” BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nclass JSBI extends Array {\n    constructor(length, sign) {\n        super(length);\n        this.sign = sign;\n        // Explicitly set the prototype as per\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, JSBI.prototype);\n        if (length > JSBI.__kMaxLength) {\n            throw new RangeError('Maximum BigInt size exceeded');\n        }\n    }\n    static BigInt(arg) {\n        if (typeof arg === 'number') {\n            if (arg === 0)\n                return JSBI.__zero();\n            if (JSBI.__isOneDigitInt(arg)) {\n                if (arg < 0) {\n                    return JSBI.__oneDigit(-arg, true);\n                }\n                return JSBI.__oneDigit(arg, false);\n            }\n            if (!Number.isFinite(arg) || Math.floor(arg) !== arg) {\n                throw new RangeError('The number ' + arg + ' cannot be converted to ' +\n                    'BigInt because it is not an integer');\n            }\n            return JSBI.__fromDouble(arg);\n        }\n        else if (typeof arg === 'string') {\n            const result = JSBI.__fromString(arg);\n            if (result === null) {\n                throw new SyntaxError('Cannot convert ' + arg + ' to a BigInt');\n            }\n            return result;\n        }\n        else if (typeof arg === 'boolean') {\n            if (arg === true) {\n                return JSBI.__oneDigit(1, false);\n            }\n            return JSBI.__zero();\n        }\n        else if (typeof arg === 'object') {\n            if (arg.constructor === JSBI)\n                return arg;\n            const primitive = JSBI.__toPrimitive(arg);\n            return JSBI.BigInt(primitive);\n        }\n        throw new TypeError('Cannot convert ' + arg + ' to a BigInt');\n    }\n    toDebugString() {\n        const result = ['BigInt['];\n        for (const digit of this) {\n            result.push((digit ? (digit >>> 0).toString(16) : digit) + ', ');\n        }\n        result.push(']');\n        return result.join('');\n    }\n    toString(radix = 10) {\n        if (radix < 2 || radix > 36) {\n            throw new RangeError('toString() radix argument must be between 2 and 36');\n        }\n        if (this.length === 0)\n            return '0';\n        if ((radix & (radix - 1)) === 0) {\n            return JSBI.__toStringBasePowerOfTwo(this, radix);\n        }\n        return JSBI.__toStringGeneric(this, radix, false);\n    }\n    valueOf() {\n        throw new Error('Convert JSBI instances to native numbers using `toNumber`.');\n    }\n    // Equivalent of \"Number(my_bigint)\" in the native implementation.\n    // TODO: add more tests\n    static toNumber(x) {\n        const xLength = x.length;\n        if (xLength === 0)\n            return 0;\n        if (xLength === 1) {\n            const value = x.__unsignedDigit(0);\n            return x.sign ? -value : value;\n        }\n        const xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        if (xBitLength > 1024)\n            return x.sign ? -Infinity : Infinity;\n        let exponent = xBitLength - 1;\n        let currentDigit = xMsd;\n        let digitIndex = xLength - 1;\n        const shift = msdLeadingZeros + 3;\n        let mantissaHigh = (shift === 32) ? 0 : currentDigit << shift;\n        mantissaHigh >>>= 12;\n        const mantissaHighBitsUnset = shift - 12;\n        let mantissaLow = (shift >= 12) ? 0 : (currentDigit << (20 + shift));\n        let mantissaLowBitsUnset = 20 + shift;\n        if (mantissaHighBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            mantissaHigh |= (currentDigit >>> (30 - mantissaHighBitsUnset));\n            mantissaLow = currentDigit << mantissaHighBitsUnset + 2;\n            mantissaLowBitsUnset = mantissaHighBitsUnset + 2;\n        }\n        while (mantissaLowBitsUnset > 0 && digitIndex > 0) {\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            if (mantissaLowBitsUnset >= 30) {\n                mantissaLow |= (currentDigit << (mantissaLowBitsUnset - 30));\n            }\n            else {\n                mantissaLow |= (currentDigit >>> (30 - mantissaLowBitsUnset));\n            }\n            mantissaLowBitsUnset -= 30;\n        }\n        const rounding = JSBI.__decideRounding(x, mantissaLowBitsUnset, digitIndex, currentDigit);\n        if (rounding === 1 || (rounding === 0 && (mantissaLow & 1) === 1)) {\n            mantissaLow = (mantissaLow + 1) >>> 0;\n            if (mantissaLow === 0) {\n                // Incrementing mantissaLow overflowed.\n                mantissaHigh++;\n                if ((mantissaHigh >>> 20) !== 0) {\n                    // Incrementing mantissaHigh overflowed.\n                    mantissaHigh = 0;\n                    exponent++;\n                    if (exponent > 1023) {\n                        // Incrementing the exponent overflowed.\n                        return x.sign ? -Infinity : Infinity;\n                    }\n                }\n            }\n        }\n        const signBit = x.sign ? (1 << 31) : 0;\n        exponent = (exponent + 0x3FF) << 20;\n        JSBI.__kBitConversionInts[JSBI.__kBitConversionIntHigh] =\n            signBit | exponent | mantissaHigh;\n        JSBI.__kBitConversionInts[JSBI.__kBitConversionIntLow] = mantissaLow;\n        return JSBI.__kBitConversionDouble[0];\n    }\n    // Operations.\n    static unaryMinus(x) {\n        if (x.length === 0)\n            return x;\n        const result = x.__copy();\n        result.sign = !x.sign;\n        return result;\n    }\n    static bitwiseNot(x) {\n        if (x.sign) {\n            // ~(-x) == ~(~(x-1)) == x-1\n            return JSBI.__absoluteSubOne(x).__trim();\n        }\n        // ~x == -x-1 == -(x+1)\n        return JSBI.__absoluteAddOne(x, true);\n    }\n    static exponentiate(x, y) {\n        if (y.sign) {\n            throw new RangeError('Exponent must be positive');\n        }\n        if (y.length === 0) {\n            return JSBI.__oneDigit(1, false);\n        }\n        if (x.length === 0)\n            return x;\n        if (x.length === 1 && x.__digit(0) === 1) {\n            // (-1) ** even_number == 1.\n            if (x.sign && (y.__digit(0) & 1) === 0) {\n                return JSBI.unaryMinus(x);\n            }\n            // (-1) ** odd_number == -1, 1 ** anything == 1.\n            return x;\n        }\n        // For all bases >= 2, very large exponents would lead to unrepresentable\n        // results.\n        if (y.length > 1)\n            throw new RangeError('BigInt too big');\n        let expValue = y.__unsignedDigit(0);\n        if (expValue === 1)\n            return x;\n        if (expValue >= JSBI.__kMaxLengthBits) {\n            throw new RangeError('BigInt too big');\n        }\n        if (x.length === 1 && x.__digit(0) === 2) {\n            // Fast path for 2^n.\n            const neededDigits = 1 + ((expValue / 30) | 0);\n            const sign = x.sign && ((expValue & 1) !== 0);\n            const result = new JSBI(neededDigits, sign);\n            result.__initializeDigits();\n            // All bits are zero. Now set the n-th bit.\n            const msd = 1 << (expValue % 30);\n            result.__setDigit(neededDigits - 1, msd);\n            return result;\n        }\n        let result = null;\n        let runningSquare = x;\n        // This implicitly sets the result's sign correctly.\n        if ((expValue & 1) !== 0)\n            result = x;\n        expValue >>= 1;\n        for (; expValue !== 0; expValue >>= 1) {\n            runningSquare = JSBI.multiply(runningSquare, runningSquare);\n            if ((expValue & 1) !== 0) {\n                if (result === null) {\n                    result = runningSquare;\n                }\n                else {\n                    result = JSBI.multiply(result, runningSquare);\n                }\n            }\n        }\n        // TODO see if there's a way for tsc to infer this will always happen?\n        return result;\n    }\n    static multiply(x, y) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return y;\n        let resultLength = x.length + y.length;\n        if (x.__clzmsd() + y.__clzmsd() >= 30) {\n            resultLength--;\n        }\n        const result = new JSBI(resultLength, x.sign !== y.sign);\n        result.__initializeDigits();\n        for (let i = 0; i < x.length; i++) {\n            JSBI.__multiplyAccumulate(y, x.__digit(i), result, i);\n        }\n        return result.__trim();\n    }\n    static divide(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return JSBI.__zero();\n        const resultSign = x.sign !== y.sign;\n        const divisor = y.__unsignedDigit(0);\n        let quotient;\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1) {\n                return resultSign === x.sign ? x : JSBI.unaryMinus(x);\n            }\n            quotient = JSBI.__absoluteDivSmall(x, divisor, null);\n        }\n        else {\n            quotient = JSBI.__absoluteDivLarge(x, y, true, false);\n        }\n        quotient.sign = resultSign;\n        return quotient.__trim();\n    }\n    static remainder(x, y) {\n        if (y.length === 0)\n            throw new RangeError('Division by zero');\n        if (JSBI.__absoluteCompare(x, y) < 0)\n            return x;\n        const divisor = y.__unsignedDigit(0);\n        if (y.length === 1 && divisor <= 0x7FFF) {\n            if (divisor === 1)\n                return JSBI.__zero();\n            const remainderDigit = JSBI.__absoluteModSmall(x, divisor);\n            if (remainderDigit === 0)\n                return JSBI.__zero();\n            return JSBI.__oneDigit(remainderDigit, x.sign);\n        }\n        const remainder = JSBI.__absoluteDivLarge(x, y, false, true);\n        remainder.sign = x.sign;\n        return remainder.__trim();\n    }\n    static add(x, y) {\n        const sign = x.sign;\n        if (sign === y.sign) {\n            // x + y == x + y\n            // -x + -y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x + -y == x - y == -(y - x)\n        // -x + y == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static subtract(x, y) {\n        const sign = x.sign;\n        if (sign !== y.sign) {\n            // x - (-y) == x + y\n            // (-x) - y == -(x + y)\n            return JSBI.__absoluteAdd(x, y, sign);\n        }\n        // x - y == -(y - x)\n        // (-x) - (-y) == y - x == -(x - y)\n        if (JSBI.__absoluteCompare(x, y) >= 0) {\n            return JSBI.__absoluteSub(x, y, sign);\n        }\n        return JSBI.__absoluteSub(y, x, !sign);\n    }\n    static leftShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__rightShiftByAbsolute(x, y);\n        return JSBI.__leftShiftByAbsolute(x, y);\n    }\n    static signedRightShift(x, y) {\n        if (y.length === 0 || x.length === 0)\n            return x;\n        if (y.sign)\n            return JSBI.__leftShiftByAbsolute(x, y);\n        return JSBI.__rightShiftByAbsolute(x, y);\n    }\n    static unsignedRightShift() {\n        throw new TypeError('BigInts have no unsigned right shift; use >> instead');\n    }\n    static lessThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) < 0;\n    }\n    static lessThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) <= 0;\n    }\n    static greaterThan(x, y) {\n        return JSBI.__compareToBigInt(x, y) > 0;\n    }\n    static greaterThanOrEqual(x, y) {\n        return JSBI.__compareToBigInt(x, y) >= 0;\n    }\n    static equal(x, y) {\n        if (x.sign !== y.sign)\n            return false;\n        if (x.length !== y.length)\n            return false;\n        for (let i = 0; i < x.length; i++) {\n            if (x.__digit(i) !== y.__digit(i))\n                return false;\n        }\n        return true;\n    }\n    static notEqual(x, y) {\n        return !JSBI.equal(x, y);\n    }\n    static bitwiseAnd(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteAnd(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            const resultLength = Math.max(x.length, y.length) + 1;\n            // (-x) & (-y) == ~(x-1) & ~(y-1) == ~((x-1) | (y-1))\n            // == -(((x-1) | (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteOr(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x & (-y) == x & ~(y-1) == x &~ (y-1)\n        return JSBI.__absoluteAndNot(x, JSBI.__absoluteSubOne(y)).__trim();\n    }\n    static bitwiseXor(x, y) {\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteXor(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) ^ (-y) == ~(x-1) ^ ~(y-1) == (x-1) ^ (y-1)\n            const resultLength = Math.max(x.length, y.length);\n            const result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            return JSBI.__absoluteXor(result, y1, result).__trim();\n        }\n        const resultLength = Math.max(x.length, y.length) + 1;\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x ^ (-y) == x ^ ~(y-1) == ~(x ^ (y-1)) == -((x ^ (y-1)) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteXor(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static bitwiseOr(x, y) {\n        const resultLength = Math.max(x.length, y.length);\n        if (!x.sign && !y.sign) {\n            return JSBI.__absoluteOr(x, y).__trim();\n        }\n        else if (x.sign && y.sign) {\n            // (-x) | (-y) == ~(x-1) | ~(y-1) == ~((x-1) & (y-1))\n            // == -(((x-1) & (y-1)) + 1)\n            let result = JSBI.__absoluteSubOne(x, resultLength);\n            const y1 = JSBI.__absoluteSubOne(y);\n            result = JSBI.__absoluteAnd(result, y1, result);\n            return JSBI.__absoluteAddOne(result, true, result).__trim();\n        }\n        // Assume that x is the positive BigInt.\n        if (x.sign) {\n            [x, y] = [y, x];\n        }\n        // x | (-y) == x | ~(y-1) == ~((y-1) &~ x) == -(((y-1) ~& x) + 1)\n        let result = JSBI.__absoluteSubOne(y, resultLength);\n        result = JSBI.__absoluteAndNot(result, x, result);\n        return JSBI.__absoluteAddOne(result, true, result).__trim();\n    }\n    static asIntN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} has less than {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const topDigit = x.__unsignedDigit(neededLength - 1);\n        const compareDigit = 1 << ((n - 1) % 30);\n        if (x.length === neededLength && topDigit < compareDigit)\n            return x;\n        // Otherwise truncate and simulate two's complement.\n        const hasBit = (topDigit & compareDigit) === compareDigit;\n        if (!hasBit)\n            return JSBI.__truncateToNBits(n, x);\n        if (!x.sign)\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, true);\n        if ((topDigit & (compareDigit - 1)) === 0) {\n            for (let i = neededLength - 2; i >= 0; i--) {\n                if (x.__digit(i) !== 0) {\n                    return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n                }\n            }\n            if (x.length === neededLength && topDigit === compareDigit)\n                return x;\n            return JSBI.__truncateToNBits(n, x);\n        }\n        return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n    }\n    static asUintN(n, x) {\n        if (x.length === 0)\n            return x;\n        n = Math.floor(n);\n        if (n < 0) {\n            throw new RangeError('Invalid value: not (convertible to) a safe integer');\n        }\n        if (n === 0)\n            return JSBI.__zero();\n        // If {x} is negative, simulate two's complement representation.\n        if (x.sign) {\n            if (n > JSBI.__kMaxLengthBits) {\n                throw new RangeError('BigInt too big');\n            }\n            return JSBI.__truncateAndSubFromPowerOfTwo(n, x, false);\n        }\n        // If {x} is positive and has up to {n} bits, return it directly.\n        if (n >= JSBI.__kMaxLengthBits)\n            return x;\n        const neededLength = ((n + 29) / 30) | 0;\n        if (x.length < neededLength)\n            return x;\n        const bitsInTopDigit = n % 30;\n        if (x.length == neededLength) {\n            if (bitsInTopDigit === 0)\n                return x;\n            const topDigit = x.__digit(neededLength - 1);\n            if ((topDigit >>> bitsInTopDigit) === 0)\n                return x;\n        }\n        // Otherwise, truncate.\n        return JSBI.__truncateToNBits(n, x);\n    }\n    // Operators.\n    static ADD(x, y) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string') {\n            if (typeof y !== 'string')\n                y = y.toString();\n            return x + y;\n        }\n        if (typeof y === 'string') {\n            return x.toString() + y;\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x) && JSBI.__isBigInt(y)) {\n            return JSBI.add(x, y);\n        }\n        if (typeof x === 'number' && typeof y === 'number') {\n            return x + y;\n        }\n        throw new TypeError('Cannot mix BigInt and other types, use explicit conversions');\n    }\n    static LT(x, y) {\n        return JSBI.__compare(x, y, 0);\n    }\n    static LE(x, y) {\n        return JSBI.__compare(x, y, 1);\n    }\n    static GT(x, y) {\n        return JSBI.__compare(x, y, 2);\n    }\n    static GE(x, y) {\n        return JSBI.__compare(x, y, 3);\n    }\n    static EQ(x, y) {\n        while (true) {\n            if (JSBI.__isBigInt(x)) {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.equal(x, y);\n                return JSBI.EQ(y, x);\n            }\n            else if (typeof x === 'number') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'string') {\n                if (JSBI.__isBigInt(y)) {\n                    x = JSBI.__fromString(x);\n                    if (x === null)\n                        return false;\n                    return JSBI.equal(x, y);\n                }\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'boolean') {\n                if (JSBI.__isBigInt(y))\n                    return JSBI.__equalToNumber(y, +x);\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'symbol') {\n                if (JSBI.__isBigInt(y))\n                    return false;\n                if (typeof y !== 'object')\n                    return x == y;\n                y = JSBI.__toPrimitive(y);\n            }\n            else if (typeof x === 'object') {\n                if (typeof y === 'object' && y.constructor !== JSBI)\n                    return x == y;\n                x = JSBI.__toPrimitive(x);\n            }\n            else {\n                return x == y;\n            }\n        }\n    }\n    static NE(x, y) {\n        return !JSBI.EQ(x, y);\n    }\n    // DataView-related functionality.\n    static DataViewGetBigInt64(dataview, byteOffset, littleEndian = false) {\n        return JSBI.asIntN(64, JSBI.DataViewGetBigUint64(dataview, byteOffset, littleEndian));\n    }\n    static DataViewGetBigUint64(dataview, byteOffset, littleEndian = false) {\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        const high = dataview.getUint32(byteOffset + h, littleEndian);\n        const low = dataview.getUint32(byteOffset + l, littleEndian);\n        const result = new JSBI(3, false);\n        result.__setDigit(0, low & 0x3FFFFFFF);\n        result.__setDigit(1, ((high & 0xFFFFFFF) << 2) | (low >>> 30));\n        result.__setDigit(2, high >>> 28);\n        return result.__trim();\n    }\n    static DataViewSetBigInt64(dataview, byteOffset, value, littleEndian = false) {\n        JSBI.DataViewSetBigUint64(dataview, byteOffset, value, littleEndian);\n    }\n    static DataViewSetBigUint64(dataview, byteOffset, value, littleEndian = false) {\n        value = JSBI.asUintN(64, value);\n        let high = 0;\n        let low = 0;\n        if (value.length > 0) {\n            low = value.__digit(0);\n            if (value.length > 1) {\n                const d1 = value.__digit(1);\n                low = low | d1 << 30;\n                high = d1 >>> 2;\n                if (value.length > 2) {\n                    high = high | (value.__digit(2) << 28);\n                }\n            }\n        }\n        const [h, l] = littleEndian ? [4, 0] : [0, 4];\n        dataview.setUint32(byteOffset + h, high, littleEndian);\n        dataview.setUint32(byteOffset + l, low, littleEndian);\n    }\n    // Helpers.\n    static __zero() {\n        return new JSBI(0, false);\n    }\n    static __oneDigit(value, sign) {\n        const result = new JSBI(1, sign);\n        result.__setDigit(0, value);\n        return result;\n    }\n    __copy() {\n        const result = new JSBI(this.length, this.sign);\n        for (let i = 0; i < this.length; i++) {\n            result[i] = this[i];\n        }\n        return result;\n    }\n    __trim() {\n        let newLength = this.length;\n        let last = this[newLength - 1];\n        while (last === 0) {\n            newLength--;\n            last = this[newLength - 1];\n            this.pop();\n        }\n        if (newLength === 0)\n            this.sign = false;\n        return this;\n    }\n    __initializeDigits() {\n        for (let i = 0; i < this.length; i++) {\n            this[i] = 0;\n        }\n    }\n    static __decideRounding(x, mantissaBitsUnset, digitIndex, currentDigit) {\n        if (mantissaBitsUnset > 0)\n            return -1;\n        let topUnconsumedBit;\n        if (mantissaBitsUnset < 0) {\n            topUnconsumedBit = -mantissaBitsUnset - 1;\n        }\n        else {\n            // {currentDigit} fit the mantissa exactly; look at the next digit.\n            if (digitIndex === 0)\n                return -1;\n            digitIndex--;\n            currentDigit = x.__digit(digitIndex);\n            topUnconsumedBit = 29;\n        }\n        // If the most significant remaining bit is 0, round down.\n        let mask = 1 << topUnconsumedBit;\n        if ((currentDigit & mask) === 0)\n            return -1;\n        // If any other remaining bit is set, round up.\n        mask -= 1;\n        if ((currentDigit & mask) !== 0)\n            return 1;\n        while (digitIndex > 0) {\n            digitIndex--;\n            if (x.__digit(digitIndex) !== 0)\n                return 1;\n        }\n        return 0;\n    }\n    static __fromDouble(value) {\n        const sign = value < 0;\n        JSBI.__kBitConversionDouble[0] = value;\n        const rawExponent = (JSBI.__kBitConversionInts[JSBI.__kBitConversionIntHigh] >>> 20) &\n            0x7FF;\n        const exponent = rawExponent - 0x3FF;\n        const digits = ((exponent / 30) | 0) + 1;\n        const result = new JSBI(digits, sign);\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[JSBI.__kBitConversionIntHigh] & 0xFFFFF) |\n            kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[JSBI.__kBitConversionIntLow];\n        const kMantissaHighTopBit = 20;\n        // 0-indexed position of most significant bit in most significant digit.\n        const msdTopBit = exponent % 30;\n        // Number of unused bits in the mantissa. We'll keep them shifted to the\n        // left (i.e. most significant part).\n        let remainingMantissaBits = 0;\n        // Next digit under construction.\n        let digit;\n        // First, build the MSD by shifting the mantissa appropriately.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            digit = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            digit = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            digit = (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        result.__setDigit(digits - 1, digit);\n        // Then fill in the rest of the digits.\n        for (let digitIndex = digits - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                digit = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                digit = 0;\n            }\n            result.__setDigit(digitIndex, digit);\n        }\n        return result.__trim();\n    }\n    static __isWhitespace(c) {\n        if (c <= 0x0D && c >= 0x09)\n            return true;\n        if (c <= 0x9F)\n            return c === 0x20;\n        if (c <= 0x01FFFF) {\n            return c === 0xA0 || c === 0x1680;\n        }\n        if (c <= 0x02FFFF) {\n            c &= 0x01FFFF;\n            return c <= 0x0A || c === 0x28 || c === 0x29 || c === 0x2F ||\n                c === 0x5F || c === 0x1000;\n        }\n        return c === 0xFEFF;\n    }\n    static __fromString(string, radix = 0) {\n        let sign = 0;\n        let leadingZero = false;\n        const length = string.length;\n        let cursor = 0;\n        if (cursor === length)\n            return JSBI.__zero();\n        let current = string.charCodeAt(cursor);\n        // Skip whitespace.\n        while (JSBI.__isWhitespace(current)) {\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Detect radix.\n        if (current === 0x2B) { // '+'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = 1;\n        }\n        else if (current === 0x2D) { // '-'\n            if (++cursor === length)\n                return null;\n            current = string.charCodeAt(cursor);\n            sign = -1;\n        }\n        if (radix === 0) {\n            radix = 10;\n            if (current === 0x30) { // '0'\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    radix = 16;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x4F || current === 0x6F) { // 'O' or 'o'\n                    radix = 8;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else if (current === 0x42 || current === 0x62) { // 'B' or 'b'\n                    radix = 2;\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        else if (radix === 16) {\n            if (current === 0x30) { // '0'\n                // Allow \"0x\" prefix.\n                if (++cursor === length)\n                    return JSBI.__zero();\n                current = string.charCodeAt(cursor);\n                if (current === 0x58 || current === 0x78) { // 'X' or 'x'\n                    if (++cursor === length)\n                        return null;\n                    current = string.charCodeAt(cursor);\n                }\n                else {\n                    leadingZero = true;\n                }\n            }\n        }\n        if (sign !== 0 && radix !== 10)\n            return null;\n        // Skip leading zeros.\n        while (current === 0x30) {\n            leadingZero = true;\n            if (++cursor === length)\n                return JSBI.__zero();\n            current = string.charCodeAt(cursor);\n        }\n        // Allocate result.\n        const chars = length - cursor;\n        let bitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        let roundup = JSBI.__kBitsPerCharTableMultiplier - 1;\n        if (chars > (1 << 30) / bitsPerChar)\n            return null;\n        const bitsMin = (bitsPerChar * chars + roundup) >>> JSBI.__kBitsPerCharTableShift;\n        const resultLength = ((bitsMin + 29) / 30) | 0;\n        const result = new JSBI(resultLength, false);\n        // Parse.\n        const limDigit = radix < 10 ? radix : 10;\n        const limAlpha = radix > 10 ? radix - 10 : 0;\n        if ((radix & (radix - 1)) === 0) {\n            // Power-of-two radix.\n            bitsPerChar >>= JSBI.__kBitsPerCharTableShift;\n            const parts = [];\n            const partsBits = [];\n            let done = false;\n            do {\n                let part = 0;\n                let bits = 0;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    bits += bitsPerChar;\n                    part = (part << bitsPerChar) | d;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                    if (bits + bitsPerChar > 30)\n                        break;\n                }\n                parts.push(part);\n                partsBits.push(bits);\n            } while (!done);\n            JSBI.__fillFromParts(result, parts, partsBits);\n        }\n        else {\n            result.__initializeDigits();\n            let done = false;\n            let charsSoFar = 0;\n            do {\n                let part = 0;\n                let multiplier = 1;\n                while (true) {\n                    let d;\n                    if (((current - 48) >>> 0) < limDigit) {\n                        d = current - 48;\n                    }\n                    else if ((((current | 32) - 97) >>> 0) < limAlpha) {\n                        d = (current | 32) - 87;\n                    }\n                    else {\n                        done = true;\n                        break;\n                    }\n                    const m = multiplier * radix;\n                    if (m > 0x3FFFFFFF)\n                        break;\n                    multiplier = m;\n                    part = part * radix + d;\n                    charsSoFar++;\n                    if (++cursor === length) {\n                        done = true;\n                        break;\n                    }\n                    current = string.charCodeAt(cursor);\n                }\n                roundup = JSBI.__kBitsPerCharTableMultiplier * 30 - 1;\n                const digitsSoFar = (((bitsPerChar * charsSoFar + roundup) >>>\n                    JSBI.__kBitsPerCharTableShift) / 30) | 0;\n                result.__inplaceMultiplyAdd(multiplier, part, digitsSoFar);\n            } while (!done);\n        }\n        if (cursor !== length) {\n            if (!JSBI.__isWhitespace(current))\n                return null;\n            for (cursor++; cursor < length; cursor++) {\n                current = string.charCodeAt(cursor);\n                if (!JSBI.__isWhitespace(current))\n                    return null;\n            }\n        }\n        // Get result.\n        result.sign = (sign === -1);\n        return result.__trim();\n    }\n    static __fillFromParts(result, parts, partsBits) {\n        let digitIndex = 0;\n        let digit = 0;\n        let bitsInDigit = 0;\n        for (let i = parts.length - 1; i >= 0; i--) {\n            const part = parts[i];\n            const partBits = partsBits[i];\n            digit |= (part << bitsInDigit);\n            bitsInDigit += partBits;\n            if (bitsInDigit === 30) {\n                result.__setDigit(digitIndex++, digit);\n                bitsInDigit = 0;\n                digit = 0;\n            }\n            else if (bitsInDigit > 30) {\n                result.__setDigit(digitIndex++, digit & 0x3FFFFFFF);\n                bitsInDigit -= 30;\n                digit = part >>> (partBits - bitsInDigit);\n            }\n        }\n        if (digit !== 0) {\n            if (digitIndex >= result.length)\n                throw new Error('implementation bug');\n            result.__setDigit(digitIndex++, digit);\n        }\n        for (; digitIndex < result.length; digitIndex++) {\n            result.__setDigit(digitIndex, 0);\n        }\n    }\n    static __toStringBasePowerOfTwo(x, radix) {\n        const length = x.length;\n        let bits = radix - 1;\n        bits = ((bits >>> 1) & 0x55) + (bits & 0x55);\n        bits = ((bits >>> 2) & 0x33) + (bits & 0x33);\n        bits = ((bits >>> 4) & 0x0F) + (bits & 0x0F);\n        const bitsPerChar = bits;\n        const charMask = radix - 1;\n        const msd = x.__digit(length - 1);\n        const msdLeadingZeros = JSBI.__clz30(msd);\n        const bitLength = length * 30 - msdLeadingZeros;\n        let charsRequired = ((bitLength + bitsPerChar - 1) / bitsPerChar) | 0;\n        if (x.sign)\n            charsRequired++;\n        if (charsRequired > (1 << 28))\n            throw new Error('string too long');\n        const result = new Array(charsRequired);\n        let pos = charsRequired - 1;\n        let digit = 0;\n        let availableBits = 0;\n        for (let i = 0; i < length - 1; i++) {\n            const newDigit = x.__digit(i);\n            const current = (digit | (newDigit << availableBits)) & charMask;\n            result[pos--] = JSBI.__kConversionChars[current];\n            const consumedBits = bitsPerChar - availableBits;\n            digit = newDigit >>> consumedBits;\n            availableBits = 30 - consumedBits;\n            while (availableBits >= bitsPerChar) {\n                result[pos--] = JSBI.__kConversionChars[digit & charMask];\n                digit >>>= bitsPerChar;\n                availableBits -= bitsPerChar;\n            }\n        }\n        const current = (digit | (msd << availableBits)) & charMask;\n        result[pos--] = JSBI.__kConversionChars[current];\n        digit = msd >>> (bitsPerChar - availableBits);\n        while (digit !== 0) {\n            result[pos--] = JSBI.__kConversionChars[digit & charMask];\n            digit >>>= bitsPerChar;\n        }\n        if (x.sign)\n            result[pos--] = '-';\n        if (pos !== -1)\n            throw new Error('implementation bug');\n        return result.join('');\n    }\n    static __toStringGeneric(x, radix, isRecursiveCall) {\n        const length = x.length;\n        if (length === 0)\n            return '';\n        if (length === 1) {\n            let result = x.__unsignedDigit(0).toString(radix);\n            if (isRecursiveCall === false && x.sign) {\n                result = '-' + result;\n            }\n            return result;\n        }\n        const bitLength = length * 30 - JSBI.__clz30(x.__digit(length - 1));\n        const maxBitsPerChar = JSBI.__kMaxBitsPerChar[radix];\n        const minBitsPerChar = maxBitsPerChar - 1;\n        let charsRequired = bitLength * JSBI.__kBitsPerCharTableMultiplier;\n        charsRequired += minBitsPerChar - 1;\n        charsRequired = (charsRequired / minBitsPerChar) | 0;\n        const secondHalfChars = (charsRequired + 1) >> 1;\n        // Divide-and-conquer: split by a power of {radix} that's approximately\n        // the square root of {x}, then recurse.\n        const conqueror = JSBI.exponentiate(JSBI.__oneDigit(radix, false), JSBI.__oneDigit(secondHalfChars, false));\n        let quotient;\n        let secondHalf;\n        const divisor = conqueror.__unsignedDigit(0);\n        if (conqueror.length === 1 && divisor <= 0x7FFF) {\n            quotient = new JSBI(x.length, false);\n            quotient.__initializeDigits();\n            let remainder = 0;\n            for (let i = x.length * 2 - 1; i >= 0; i--) {\n                const input = (remainder << 15) | x.__halfDigit(i);\n                quotient.__setHalfDigit(i, (input / divisor) | 0);\n                remainder = (input % divisor) | 0;\n            }\n            secondHalf = remainder.toString(radix);\n        }\n        else {\n            const divisionResult = JSBI.__absoluteDivLarge(x, conqueror, true, true);\n            quotient = divisionResult.quotient;\n            const remainder = divisionResult.remainder.__trim();\n            secondHalf = JSBI.__toStringGeneric(remainder, radix, true);\n        }\n        quotient.__trim();\n        let firstHalf = JSBI.__toStringGeneric(quotient, radix, true);\n        while (secondHalf.length < secondHalfChars) {\n            secondHalf = '0' + secondHalf;\n        }\n        if (isRecursiveCall === false && x.sign) {\n            firstHalf = '-' + firstHalf;\n        }\n        return firstHalf + secondHalf;\n    }\n    static __unequalSign(leftNegative) {\n        return leftNegative ? -1 : 1;\n    }\n    static __absoluteGreater(bothNegative) {\n        return bothNegative ? -1 : 1;\n    }\n    static __absoluteLess(bothNegative) {\n        return bothNegative ? 1 : -1;\n    }\n    static __compareToBigInt(x, y) {\n        const xSign = x.sign;\n        if (xSign !== y.sign)\n            return JSBI.__unequalSign(xSign);\n        const result = JSBI.__absoluteCompare(x, y);\n        if (result > 0)\n            return JSBI.__absoluteGreater(xSign);\n        if (result < 0)\n            return JSBI.__absoluteLess(xSign);\n        return 0;\n    }\n    static __compareToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            const xSign = x.sign;\n            const ySign = (y < 0);\n            if (xSign !== ySign)\n                return JSBI.__unequalSign(xSign);\n            if (x.length === 0) {\n                if (ySign)\n                    throw new Error('implementation bug');\n                return y === 0 ? 0 : -1;\n            }\n            // Any multi-digit BigInt is bigger than an int32.\n            if (x.length > 1)\n                return JSBI.__absoluteGreater(xSign);\n            const yAbs = Math.abs(y);\n            const xDigit = x.__unsignedDigit(0);\n            if (xDigit > yAbs)\n                return JSBI.__absoluteGreater(xSign);\n            if (xDigit < yAbs)\n                return JSBI.__absoluteLess(xSign);\n            return 0;\n        }\n        return JSBI.__compareToDouble(x, y);\n    }\n    static __compareToDouble(x, y) {\n        if (y !== y)\n            return y; // NaN.\n        if (y === Infinity)\n            return -1;\n        if (y === -Infinity)\n            return 1;\n        const xSign = x.sign;\n        const ySign = (y < 0);\n        if (xSign !== ySign)\n            return JSBI.__unequalSign(xSign);\n        if (y === 0) {\n            throw new Error('implementation bug: should be handled elsewhere');\n        }\n        if (x.length === 0)\n            return -1;\n        JSBI.__kBitConversionDouble[0] = y;\n        const rawExponent = (JSBI.__kBitConversionInts[JSBI.__kBitConversionIntHigh] >>> 20) &\n            0x7FF;\n        if (rawExponent === 0x7FF) {\n            throw new Error('implementation bug: handled elsewhere');\n        }\n        const exponent = rawExponent - 0x3FF;\n        if (exponent < 0) {\n            // The absolute value of y is less than 1. Only 0n has an absolute\n            // value smaller than that, but we've already covered that case.\n            return JSBI.__absoluteGreater(xSign);\n        }\n        const xLength = x.length;\n        let xMsd = x.__digit(xLength - 1);\n        const msdLeadingZeros = JSBI.__clz30(xMsd);\n        const xBitLength = xLength * 30 - msdLeadingZeros;\n        const yBitLength = exponent + 1;\n        if (xBitLength < yBitLength)\n            return JSBI.__absoluteLess(xSign);\n        if (xBitLength > yBitLength)\n            return JSBI.__absoluteGreater(xSign);\n        // Same sign, same bit length. Shift mantissa to align with x and compare\n        // bit for bit.\n        const kHiddenBit = 0x00100000;\n        let mantissaHigh = (JSBI.__kBitConversionInts[JSBI.__kBitConversionIntHigh] & 0xFFFFF) |\n            kHiddenBit;\n        let mantissaLow = JSBI.__kBitConversionInts[JSBI.__kBitConversionIntLow];\n        const kMantissaHighTopBit = 20;\n        const msdTopBit = 29 - msdLeadingZeros;\n        if (msdTopBit !== (((xBitLength - 1) % 30) | 0)) {\n            throw new Error('implementation bug');\n        }\n        let compareMantissa; // Shifted chunk of mantissa.\n        let remainingMantissaBits = 0;\n        // First, compare most significant digit against beginning of mantissa.\n        if (msdTopBit < kMantissaHighTopBit) {\n            const shift = kMantissaHighTopBit - msdTopBit;\n            remainingMantissaBits = shift + 32;\n            compareMantissa = mantissaHigh >>> shift;\n            mantissaHigh = (mantissaHigh << (32 - shift)) | (mantissaLow >>> shift);\n            mantissaLow = mantissaLow << (32 - shift);\n        }\n        else if (msdTopBit === kMantissaHighTopBit) {\n            remainingMantissaBits = 32;\n            compareMantissa = mantissaHigh;\n            mantissaHigh = mantissaLow;\n            mantissaLow = 0;\n        }\n        else {\n            const shift = msdTopBit - kMantissaHighTopBit;\n            remainingMantissaBits = 32 - shift;\n            compareMantissa =\n                (mantissaHigh << shift) | (mantissaLow >>> (32 - shift));\n            mantissaHigh = mantissaLow << shift;\n            mantissaLow = 0;\n        }\n        xMsd = xMsd >>> 0;\n        compareMantissa = compareMantissa >>> 0;\n        if (xMsd > compareMantissa)\n            return JSBI.__absoluteGreater(xSign);\n        if (xMsd < compareMantissa)\n            return JSBI.__absoluteLess(xSign);\n        // Then, compare additional digits against remaining mantissa bits.\n        for (let digitIndex = xLength - 2; digitIndex >= 0; digitIndex--) {\n            if (remainingMantissaBits > 0) {\n                remainingMantissaBits -= 30;\n                compareMantissa = mantissaHigh >>> 2;\n                mantissaHigh = (mantissaHigh << 30) | (mantissaLow >>> 2);\n                mantissaLow = (mantissaLow << 30);\n            }\n            else {\n                compareMantissa = 0;\n            }\n            const digit = x.__unsignedDigit(digitIndex);\n            if (digit > compareMantissa)\n                return JSBI.__absoluteGreater(xSign);\n            if (digit < compareMantissa)\n                return JSBI.__absoluteLess(xSign);\n        }\n        // Integer parts are equal; check whether {y} has a fractional part.\n        if (mantissaHigh !== 0 || mantissaLow !== 0) {\n            if (remainingMantissaBits === 0)\n                throw new Error('implementation bug');\n            return JSBI.__absoluteLess(xSign);\n        }\n        return 0;\n    }\n    static __equalToNumber(x, y) {\n        if (JSBI.__isOneDigitInt(y)) {\n            if (y === 0)\n                return x.length === 0;\n            // Any multi-digit BigInt is bigger than an int32.\n            return (x.length === 1) && (x.sign === (y < 0)) &&\n                (x.__unsignedDigit(0) === Math.abs(y));\n        }\n        return JSBI.__compareToDouble(x, y) === 0;\n    }\n    // Comparison operations, chosen such that \"op ^ 2\" reverses direction:\n    // 0 - lessThan\n    // 1 - lessThanOrEqual\n    // 2 - greaterThan\n    // 3 - greaterThanOrEqual\n    static __comparisonResultToBool(result, op) {\n        switch (op) {\n            case 0: return result < 0;\n            case 1: return result <= 0;\n            case 2: return result > 0;\n            case 3: return result >= 0;\n        }\n    }\n    static __compare(x, y, op) {\n        x = JSBI.__toPrimitive(x);\n        y = JSBI.__toPrimitive(y);\n        if (typeof x === 'string' && typeof y === 'string') {\n            switch (op) {\n                case 0: return x < y;\n                case 1: return x <= y;\n                case 2: return x > y;\n                case 3: return x >= y;\n            }\n        }\n        if (JSBI.__isBigInt(x) && typeof y === 'string') {\n            y = JSBI.__fromString(y);\n            if (y === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        if (typeof x === 'string' && JSBI.__isBigInt(y)) {\n            x = JSBI.__fromString(x);\n            if (x === null)\n                return false;\n            return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n        }\n        x = JSBI.__toNumeric(x);\n        y = JSBI.__toNumeric(y);\n        if (JSBI.__isBigInt(x)) {\n            if (JSBI.__isBigInt(y)) {\n                return JSBI.__comparisonResultToBool(JSBI.__compareToBigInt(x, y), op);\n            }\n            if (typeof y !== 'number')\n                throw new Error('implementation bug');\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(x, y), op);\n        }\n        if (typeof x !== 'number')\n            throw new Error('implementation bug');\n        if (JSBI.__isBigInt(y)) {\n            // Note that \"op ^ 2\" reverses the op's direction.\n            return JSBI.__comparisonResultToBool(JSBI.__compareToNumber(y, x), (op ^ 2));\n        }\n        if (typeof y !== 'number')\n            throw new Error('implementation bug');\n        switch (op) {\n            case 0: return x < y;\n            case 1: return x <= y;\n            case 2: return x > y;\n            case 3: return x >= y;\n        }\n    }\n    __clzmsd() {\n        return JSBI.__clz30(this.__digit(this.length - 1));\n    }\n    static __absoluteAdd(x, y, resultSign) {\n        if (x.length < y.length)\n            return JSBI.__absoluteAdd(y, x, resultSign);\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        let resultLength = x.length;\n        if (x.__clzmsd() === 0 || (y.length === x.length && y.__clzmsd() === 0)) {\n            resultLength++;\n        }\n        const result = new JSBI(resultLength, resultSign);\n        let carry = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) + y.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (i < result.length) {\n            result.__setDigit(i, carry);\n        }\n        return result.__trim();\n    }\n    static __absoluteSub(x, y, resultSign) {\n        if (x.length === 0)\n            return x;\n        if (y.length === 0)\n            return x.sign === resultSign ? x : JSBI.unaryMinus(x);\n        const result = new JSBI(x.length, resultSign);\n        let borrow = 0;\n        let i = 0;\n        for (; i < y.length; i++) {\n            const r = x.__digit(i) - y.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < x.length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        return result.__trim();\n    }\n    static __absoluteAddOne(x, sign, result = null) {\n        const inputLength = x.length;\n        if (result === null) {\n            result = new JSBI(inputLength, sign);\n        }\n        else {\n            result.sign = sign;\n        }\n        let carry = 1;\n        for (let i = 0; i < inputLength; i++) {\n            const r = x.__digit(i) + carry;\n            carry = r >>> 30;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (carry !== 0) {\n            result.__setDigitGrow(inputLength, 1);\n        }\n        return result;\n    }\n    static __absoluteSubOne(x, resultLength) {\n        const length = x.length;\n        resultLength = resultLength || length;\n        const result = new JSBI(resultLength, false);\n        let borrow = 1;\n        for (let i = 0; i < length; i++) {\n            const r = x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (borrow !== 0)\n            throw new Error('implementation bug');\n        for (let i = length; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAnd(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = numPairs;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & y.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteAndNot(x, y, result = null) {\n        const xLength = x.length;\n        const yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) & ~y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteOr(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) | y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteXor(x, y, result = null) {\n        let xLength = x.length;\n        let yLength = y.length;\n        let numPairs = yLength;\n        if (xLength < yLength) {\n            numPairs = xLength;\n            const tmp = x;\n            const tmpLength = xLength;\n            x = y;\n            xLength = yLength;\n            y = tmp;\n            yLength = tmpLength;\n        }\n        let resultLength = xLength;\n        if (result === null) {\n            result = new JSBI(resultLength, false);\n        }\n        else {\n            resultLength = result.length;\n        }\n        let i = 0;\n        for (; i < numPairs; i++) {\n            result.__setDigit(i, x.__digit(i) ^ y.__digit(i));\n        }\n        for (; i < xLength; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        for (; i < resultLength; i++) {\n            result.__setDigit(i, 0);\n        }\n        return result;\n    }\n    static __absoluteCompare(x, y) {\n        const diff = x.length - y.length;\n        if (diff !== 0)\n            return diff;\n        let i = x.length - 1;\n        while (i >= 0 && x.__digit(i) === y.__digit(i))\n            i--;\n        if (i < 0)\n            return 0;\n        return x.__unsignedDigit(i) > y.__unsignedDigit(i) ? 1 : -1;\n    }\n    static __multiplyAccumulate(multiplicand, multiplier, accumulator, accumulatorIndex) {\n        if (multiplier === 0)\n            return;\n        const m2Low = multiplier & 0x7FFF;\n        const m2High = multiplier >>> 15;\n        let carry = 0;\n        let high = 0;\n        for (let i = 0; i < multiplicand.length; i++, accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            const m1 = multiplicand.__digit(i);\n            const m1Low = m1 & 0x7FFF;\n            const m1High = m1 >>> 15;\n            const rLow = JSBI.__imul(m1Low, m2Low);\n            const rMid1 = JSBI.__imul(m1Low, m2High);\n            const rMid2 = JSBI.__imul(m1High, m2Low);\n            const rHigh = JSBI.__imul(m1High, m2High);\n            acc += high + rLow + carry;\n            carry = acc >>> 30;\n            acc &= 0x3FFFFFFF;\n            acc += ((rMid1 & 0x7FFF) << 15) + ((rMid2 & 0x7FFF) << 15);\n            carry += acc >>> 30;\n            high = rHigh + (rMid1 >>> 15) + (rMid2 >>> 15);\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n        for (; carry !== 0 || high !== 0; accumulatorIndex++) {\n            let acc = accumulator.__digit(accumulatorIndex);\n            acc += carry + high;\n            high = 0;\n            carry = acc >>> 30;\n            accumulator.__setDigit(accumulatorIndex, acc & 0x3FFFFFFF);\n        }\n    }\n    static __internalMultiplyAdd(source, factor, summand, n, result) {\n        let carry = summand;\n        let high = 0;\n        for (let i = 0; i < n; i++) {\n            const digit = source.__digit(i);\n            const rx = JSBI.__imul(digit & 0x7FFF, factor);\n            const ry = JSBI.__imul(digit >>> 15, factor);\n            const r = rx + ((ry & 0x7FFF) << 15) + high + carry;\n            carry = r >>> 30;\n            high = ry >>> 15;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        if (result.length > n) {\n            result.__setDigit(n++, carry + high);\n            while (n < result.length) {\n                result.__setDigit(n++, 0);\n            }\n        }\n        else {\n            if (carry + high !== 0)\n                throw new Error('implementation bug');\n        }\n    }\n    __inplaceMultiplyAdd(multiplier, summand, length) {\n        if (length > this.length)\n            length = this.length;\n        const mLow = multiplier & 0x7FFF;\n        const mHigh = multiplier >>> 15;\n        let carry = 0;\n        let high = summand;\n        for (let i = 0; i < length; i++) {\n            const d = this.__digit(i);\n            const dLow = d & 0x7FFF;\n            const dHigh = d >>> 15;\n            const pLow = JSBI.__imul(dLow, mLow);\n            const pMid1 = JSBI.__imul(dLow, mHigh);\n            const pMid2 = JSBI.__imul(dHigh, mLow);\n            const pHigh = JSBI.__imul(dHigh, mHigh);\n            let result = high + pLow + carry;\n            carry = result >>> 30;\n            result &= 0x3FFFFFFF;\n            result += ((pMid1 & 0x7FFF) << 15) + ((pMid2 & 0x7FFF) << 15);\n            carry += result >>> 30;\n            high = pHigh + (pMid1 >>> 15) + (pMid2 >>> 15);\n            this.__setDigit(i, result & 0x3FFFFFFF);\n        }\n        if (carry !== 0 || high !== 0) {\n            throw new Error('implementation bug');\n        }\n    }\n    static __absoluteDivSmall(x, divisor, quotient = null) {\n        if (quotient === null)\n            quotient = new JSBI(x.length, false);\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i -= 2) {\n            let input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            const upperHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            input = ((remainder << 15) | x.__halfDigit(i - 1)) >>> 0;\n            const lowerHalf = (input / divisor) | 0;\n            remainder = (input % divisor) | 0;\n            quotient.__setDigit(i >>> 1, (upperHalf << 15) | lowerHalf);\n        }\n        return quotient;\n    }\n    static __absoluteModSmall(x, divisor) {\n        let remainder = 0;\n        for (let i = x.length * 2 - 1; i >= 0; i--) {\n            const input = ((remainder << 15) | x.__halfDigit(i)) >>> 0;\n            remainder = (input % divisor) | 0;\n        }\n        return remainder;\n    }\n    static __absoluteDivLarge(dividend, divisor, wantQuotient, wantRemainder) {\n        const n = divisor.__halfDigitLength();\n        const n2 = divisor.length;\n        const m = dividend.__halfDigitLength() - n;\n        let q = null;\n        if (wantQuotient) {\n            q = new JSBI((m + 2) >>> 1, false);\n            q.__initializeDigits();\n        }\n        const qhatv = new JSBI((n + 2) >>> 1, false);\n        qhatv.__initializeDigits();\n        // D1.\n        const shift = JSBI.__clz15(divisor.__halfDigit(n - 1));\n        if (shift > 0) {\n            divisor = JSBI.__specialLeftShift(divisor, shift, 0 /* add no digits*/);\n        }\n        const u = JSBI.__specialLeftShift(dividend, shift, 1 /* add one digit */);\n        // D2.\n        const vn1 = divisor.__halfDigit(n - 1);\n        let halfDigitBuffer = 0;\n        for (let j = m; j >= 0; j--) {\n            // D3.\n            let qhat = 0x7FFF;\n            const ujn = u.__halfDigit(j + n);\n            if (ujn !== vn1) {\n                const input = ((ujn << 15) | u.__halfDigit(j + n - 1)) >>> 0;\n                qhat = (input / vn1) | 0;\n                let rhat = (input % vn1) | 0;\n                const vn2 = divisor.__halfDigit(n - 2);\n                const ujn2 = u.__halfDigit(j + n - 2);\n                while ((JSBI.__imul(qhat, vn2) >>> 0) > (((rhat << 16) | ujn2) >>> 0)) {\n                    qhat--;\n                    rhat += vn1;\n                    if (rhat > 0x7FFF)\n                        break;\n                }\n            }\n            // D4.\n            JSBI.__internalMultiplyAdd(divisor, qhat, 0, n2, qhatv);\n            let c = u.__inplaceSub(qhatv, j, n + 1);\n            if (c !== 0) {\n                c = u.__inplaceAdd(divisor, j, n);\n                u.__setHalfDigit(j + n, (u.__halfDigit(j + n) + c) & 0x7FFF);\n                qhat--;\n            }\n            if (wantQuotient) {\n                if (j & 1) {\n                    halfDigitBuffer = qhat << 15;\n                }\n                else {\n                    // TODO make this statically determinable\n                    q.__setDigit(j >>> 1, halfDigitBuffer | qhat);\n                }\n            }\n        }\n        if (wantRemainder) {\n            u.__inplaceRightShift(shift);\n            if (wantQuotient) {\n                return { quotient: q, remainder: u };\n            }\n            return u;\n        }\n        if (wantQuotient)\n            return q;\n        // TODO find a way to make this statically unreachable?\n        throw new Error('unreachable');\n    }\n    static __clz15(value) {\n        return JSBI.__clz30(value) - 15;\n    }\n    // TODO: work on full digits, like __inplaceSub?\n    __inplaceAdd(summand, startIndex, halfDigits) {\n        let carry = 0;\n        for (let i = 0; i < halfDigits; i++) {\n            const sum = this.__halfDigit(startIndex + i) +\n                summand.__halfDigit(i) +\n                carry;\n            carry = sum >>> 15;\n            this.__setHalfDigit(startIndex + i, sum & 0x7FFF);\n        }\n        return carry;\n    }\n    __inplaceSub(subtrahend, startIndex, halfDigits) {\n        const fullSteps = (halfDigits - 1) >>> 1;\n        let borrow = 0;\n        if (startIndex & 1) {\n            // this:   [..][..][..]\n            // subtr.:   [..][..]\n            startIndex >>= 1;\n            let current = this.__digit(startIndex);\n            let r0 = current & 0x7FFF;\n            let i = 0;\n            for (; i < fullSteps; i++) {\n                const sub = subtrahend.__digit(i);\n                const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - (sub >>> 15) - borrow;\n                borrow = (r0 >>> 15) & 1;\n            }\n            // Unrolling the last iteration gives a 5% performance benefit!\n            const sub = subtrahend.__digit(i);\n            const r15 = (current >>> 15) - (sub & 0x7FFF) - borrow;\n            borrow = (r15 >>> 15) & 1;\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            const subTop = sub >>> 15;\n            if (startIndex + i + 1 >= this.length) {\n                throw new RangeError('out of bounds');\n            }\n            if ((halfDigits & 1) === 0) {\n                current = this.__digit(startIndex + i + 1);\n                r0 = (current & 0x7FFF) - subTop - borrow;\n                borrow = (r0 >>> 15) & 1;\n                this.__setDigit(startIndex + subtrahend.length, (current & 0x3FFF8000) | (r0 & 0x7FFF));\n            }\n        }\n        else {\n            startIndex >>= 1;\n            let i = 0;\n            for (; i < subtrahend.length - 1; i++) {\n                const current = this.__digit(startIndex + i);\n                const sub = subtrahend.__digit(i);\n                const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n                borrow = (r0 >>> 15) & 1;\n                const r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n                this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n            }\n            const current = this.__digit(startIndex + i);\n            const sub = subtrahend.__digit(i);\n            const r0 = (current & 0x7FFF) - (sub & 0x7FFF) - borrow;\n            borrow = (r0 >>> 15) & 1;\n            let r15 = 0;\n            if ((halfDigits & 1) === 0) {\n                r15 = (current >>> 15) - (sub >>> 15) - borrow;\n                borrow = (r15 >>> 15) & 1;\n            }\n            this.__setDigit(startIndex + i, ((r15 & 0x7FFF) << 15) | (r0 & 0x7FFF));\n        }\n        return borrow;\n    }\n    __inplaceRightShift(shift) {\n        if (shift === 0)\n            return;\n        let carry = this.__digit(0) >>> shift;\n        const last = this.length - 1;\n        for (let i = 0; i < last; i++) {\n            const d = this.__digit(i + 1);\n            this.__setDigit(i, ((d << (30 - shift)) & 0x3FFFFFFF) | carry);\n            carry = d >>> shift;\n        }\n        this.__setDigit(last, carry);\n    }\n    static __specialLeftShift(x, shift, addDigit) {\n        const n = x.length;\n        const resultLength = n + addDigit;\n        const result = new JSBI(resultLength, false);\n        if (shift === 0) {\n            for (let i = 0; i < n; i++)\n                result.__setDigit(i, x.__digit(i));\n            if (addDigit > 0)\n                result.__setDigit(n, 0);\n            return result;\n        }\n        let carry = 0;\n        for (let i = 0; i < n; i++) {\n            const d = x.__digit(i);\n            result.__setDigit(i, ((d << shift) & 0x3FFFFFFF) | carry);\n            carry = d >>> (30 - shift);\n        }\n        if (addDigit > 0) {\n            result.__setDigit(n, carry);\n        }\n        return result;\n    }\n    static __leftShiftByAbsolute(x, y) {\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            throw new RangeError('BigInt too big');\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        const length = x.length;\n        const grow = bitsShift !== 0 &&\n            (x.__digit(length - 1) >>> (30 - bitsShift)) !== 0;\n        const resultLength = length + digitShift + (grow ? 1 : 0);\n        const result = new JSBI(resultLength, x.sign);\n        if (bitsShift === 0) {\n            let i = 0;\n            for (; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (; i < resultLength; i++) {\n                result.__setDigit(i, x.__digit(i - digitShift));\n            }\n        }\n        else {\n            let carry = 0;\n            for (let i = 0; i < digitShift; i++)\n                result.__setDigit(i, 0);\n            for (let i = 0; i < length; i++) {\n                const d = x.__digit(i);\n                result.__setDigit(i + digitShift, ((d << bitsShift) & 0x3FFFFFFF) | carry);\n                carry = d >>> (30 - bitsShift);\n            }\n            if (grow) {\n                result.__setDigit(length + digitShift, carry);\n            }\n            else {\n                if (carry !== 0)\n                    throw new Error('implementation bug');\n            }\n        }\n        return result.__trim();\n    }\n    static __rightShiftByAbsolute(x, y) {\n        const length = x.length;\n        const sign = x.sign;\n        const shift = JSBI.__toShiftAmount(y);\n        if (shift < 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        const digitShift = (shift / 30) | 0;\n        const bitsShift = shift % 30;\n        let resultLength = length - digitShift;\n        if (resultLength <= 0)\n            return JSBI.__rightShiftByMaximum(sign);\n        // For negative numbers, round down if any bit was shifted out (so that\n        // e.g. -5n >> 1n == -3n and not -2n). Check now whether this will happen\n        // and whether itc an cause overflow into a new digit. If we allocate the\n        // result large enough up front, it avoids having to do grow it later.\n        let mustRoundDown = false;\n        if (sign) {\n            const mask = (1 << bitsShift) - 1;\n            if ((x.__digit(digitShift) & mask) !== 0) {\n                mustRoundDown = true;\n            }\n            else {\n                for (let i = 0; i < digitShift; i++) {\n                    if (x.__digit(i) !== 0) {\n                        mustRoundDown = true;\n                        break;\n                    }\n                }\n            }\n        }\n        // If bitsShift is non-zero, it frees up bits, preventing overflow.\n        if (mustRoundDown && bitsShift === 0) {\n            // Overflow cannot happen if the most significant digit has unset bits.\n            const msd = x.__digit(length - 1);\n            const roundingCanOverflow = ~msd === 0;\n            if (roundingCanOverflow)\n                resultLength++;\n        }\n        let result = new JSBI(resultLength, sign);\n        if (bitsShift === 0) {\n            // Zero out any overflow digit (see \"roundingCanOverflow\" above).\n            result.__setDigit(resultLength - 1, 0);\n            for (let i = digitShift; i < length; i++) {\n                result.__setDigit(i - digitShift, x.__digit(i));\n            }\n        }\n        else {\n            let carry = x.__digit(digitShift) >>> bitsShift;\n            const last = length - digitShift - 1;\n            for (let i = 0; i < last; i++) {\n                const d = x.__digit(i + digitShift + 1);\n                result.__setDigit(i, ((d << (30 - bitsShift)) & 0x3FFFFFFF) | carry);\n                carry = d >>> bitsShift;\n            }\n            result.__setDigit(last, carry);\n        }\n        if (mustRoundDown) {\n            // Since the result is negative, rounding down means adding one to its\n            // absolute value. This cannot overflow.\n            result = JSBI.__absoluteAddOne(result, true, result);\n        }\n        return result.__trim();\n    }\n    static __rightShiftByMaximum(sign) {\n        if (sign) {\n            return JSBI.__oneDigit(1, true);\n        }\n        return JSBI.__zero();\n    }\n    static __toShiftAmount(x) {\n        if (x.length > 1)\n            return -1;\n        const value = x.__unsignedDigit(0);\n        if (value > JSBI.__kMaxLengthBits)\n            return -1;\n        return value;\n    }\n    static __toPrimitive(obj, hint = 'default') {\n        if (typeof obj !== 'object')\n            return obj;\n        if (obj.constructor === JSBI)\n            return obj;\n        if (typeof Symbol !== 'undefined' &&\n            typeof Symbol.toPrimitive === 'symbol') {\n            if (obj[Symbol.toPrimitive]) {\n                const primitive = obj[Symbol.toPrimitive](hint);\n                if (typeof primitive !== 'object')\n                    return primitive;\n                throw new TypeError('Cannot convert object to primitive value');\n            }\n        }\n        const valueOf = obj.valueOf;\n        if (valueOf) {\n            const primitive = valueOf.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        const toString = obj.toString;\n        if (toString) {\n            const primitive = toString.call(obj);\n            if (typeof primitive !== 'object')\n                return primitive;\n        }\n        throw new TypeError('Cannot convert object to primitive value');\n    }\n    static __toNumeric(value) {\n        if (JSBI.__isBigInt(value))\n            return value;\n        return +value;\n    }\n    static __isBigInt(value) {\n        return typeof value === 'object' && value !== null &&\n            value.constructor === JSBI;\n    }\n    static __truncateToNBits(n, x) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, x.sign);\n        const last = neededDigits - 1;\n        for (let i = 0; i < last; i++) {\n            result.__setDigit(i, x.__digit(i));\n        }\n        let msd = x.__digit(last);\n        if ((n % 30) !== 0) {\n            const drop = 32 - (n % 30);\n            msd = (msd << drop) >>> drop;\n        }\n        result.__setDigit(last, msd);\n        return result.__trim();\n    }\n    static __truncateAndSubFromPowerOfTwo(n, x, resultSign) {\n        const neededDigits = ((n + 29) / 30) | 0;\n        const result = new JSBI(neededDigits, resultSign);\n        let i = 0;\n        const last = neededDigits - 1;\n        let borrow = 0;\n        const limit = Math.min(last, x.length);\n        for (; i < limit; i++) {\n            const r = 0 - x.__digit(i) - borrow;\n            borrow = (r >>> 30) & 1;\n            result.__setDigit(i, r & 0x3FFFFFFF);\n        }\n        for (; i < last; i++) {\n            result.__setDigit(i, (-borrow & 0x3FFFFFFF) | 0);\n        }\n        let msd = last < x.length ? x.__digit(last) : 0;\n        const msdBitsConsumed = n % 30;\n        let resultMsd;\n        if (msdBitsConsumed === 0) {\n            resultMsd = 0 - msd - borrow;\n            resultMsd &= 0x3FFFFFFF;\n        }\n        else {\n            const drop = 32 - msdBitsConsumed;\n            msd = (msd << drop) >>> drop;\n            const minuendMsd = 1 << (32 - drop);\n            resultMsd = minuendMsd - msd - borrow;\n            resultMsd &= (minuendMsd - 1);\n        }\n        result.__setDigit(last, resultMsd);\n        return result.__trim();\n    }\n    // Digit helpers.\n    __digit(i) {\n        return this[i];\n    }\n    __unsignedDigit(i) {\n        return this[i] >>> 0;\n    }\n    __setDigit(i, digit) {\n        this[i] = digit | 0;\n    }\n    __setDigitGrow(i, digit) {\n        this[i] = digit | 0;\n    }\n    __halfDigitLength() {\n        const len = this.length;\n        if (this.__unsignedDigit(len - 1) <= 0x7FFF)\n            return len * 2 - 1;\n        return len * 2;\n    }\n    __halfDigit(i) {\n        return (this[i >>> 1] >>> ((i & 1) * 15)) & 0x7FFF;\n    }\n    __setHalfDigit(i, value) {\n        const digitIndex = i >>> 1;\n        const previous = this.__digit(digitIndex);\n        const updated = (i & 1) ? (previous & 0x7FFF) | (value << 15) :\n            (previous & 0x3FFF8000) | (value & 0x7FFF);\n        this.__setDigit(digitIndex, updated);\n    }\n    static __digitPow(base, exponent) {\n        let result = 1;\n        while (exponent > 0) {\n            if (exponent & 1)\n                result *= base;\n            exponent >>>= 1;\n            base *= base;\n        }\n        return result;\n    }\n    static __detectBigEndian() {\n        JSBI.__kBitConversionDouble[0] = -0.0;\n        return JSBI.__kBitConversionInts[0] !== 0;\n    }\n    static __isOneDigitInt(x) {\n        return (x & 0x3FFFFFFF) === x;\n    }\n}\nJSBI.__kMaxLength = 1 << 25;\nJSBI.__kMaxLengthBits = JSBI.__kMaxLength << 5;\n// Lookup table for the maximum number of bits required per character of a\n// base-N string representation of a number. To increase accuracy, the array\n// value is the actual value multiplied by 32. To generate this table:\n//\n// for (let i = 0; i <= 36; i++) {\n//   console.log(Math.ceil(Math.log2(i) * 32) + ',');\n// }\nJSBI.__kMaxBitsPerChar = [\n    0, 0, 32, 51, 64, 75, 83, 90, 96,\n    102, 107, 111, 115, 119, 122, 126, 128,\n    131, 134, 136, 139, 141, 143, 145, 147,\n    149, 151, 153, 154, 156, 158, 159, 160,\n    162, 163, 165, 166, // 33..36\n];\nJSBI.__kBitsPerCharTableShift = 5;\nJSBI.__kBitsPerCharTableMultiplier = 1 << JSBI.__kBitsPerCharTableShift;\nJSBI.__kConversionChars = '0123456789abcdefghijklmnopqrstuvwxyz'.split('');\nJSBI.__kBitConversionBuffer = new ArrayBuffer(8);\nJSBI.__kBitConversionDouble = new Float64Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionInts = new Int32Array(JSBI.__kBitConversionBuffer);\nJSBI.__kBitConversionIntHigh = JSBI.__detectBigEndian() ? 0 : 1;\nJSBI.__kBitConversionIntLow = JSBI.__detectBigEndian() ? 1 : 0;\n// For IE11 compatibility.\n// Note that the custom replacements are tailored for JSBI's needs, and as\n// such are not reusable as general-purpose polyfills.\nJSBI.__clz30 = Math.clz32 ? function (x) {\n    return Math.clz32(x) - 2;\n} : function (x) {\n    if (x === 0)\n        return 30;\n    return 29 - (Math.log(x >>> 0) / Math.LN2 | 0) | 0;\n};\nJSBI.__imul = Math.imul || function (a, b) {\n    return (a * b) | 0;\n};\nexport default JSBI;\n//# sourceMappingURL=jsbi.js.map"],"names":["Math","imul","t","clz32","JSBI","_Array","abs","i","max","_","floor","length","sign","_this","_classCallCheck","_callSuper","Object","setPrototypeOf","prototype","__kMaxLength","RangeError","_inherits","_createClass","key","value","toDebugString","_step","result","_iterator","_createForOfIteratorHelper","s","n","done","digit","push","toString","err","e","f","join","radix","arguments","__toStringBasePowerOfTwo","__toStringGeneric","valueOf","Error","__copy","__trim","newLength","last","pop","__initializeDigits","__clzmsd","__clz30","__digit","__inplaceMultiplyAdd","multiplier","summand","mLow","mHigh","carry","high","d","dLow","dHigh","pLow","__imul","pMid1","pMid2","pHigh","__setDigit","__inplaceAdd","startIndex","halfDigits","sum","__halfDigit","__setHalfDigit","__inplaceSub","subtrahend","fullSteps","borrow","current","r0","sub","r15","subTop","__inplaceRightShift","shift","__unsignedDigit","__setDigitGrow","__halfDigitLength","len","digitIndex","previous","updated","BigInt","arg","Number","isFinite","__zero","__isOneDigitInt","__oneDigit","__fromDouble","__fromString","SyntaxError","_typeof","constructor","primitive","__toPrimitive","TypeError","toNumber","x","xLength","xMsd","msdLeadingZeros","xBitLength","Infinity","exponent","currentDigit","mantissaHigh","mantissaHighBitsUnset","mantissaLow","mantissaLowBitsUnset","rounding","__decideRounding","signBit","__kBitConversionInts","__kBitConversionIntHigh","__kBitConversionIntLow","__kBitConversionDouble","unaryMinus","bitwiseNot","__absoluteSubOne","__absoluteAddOne","exponentiate","y","expValue","__kMaxLengthBits","neededDigits","msd","runningSquare","multiply","resultLength","__multiplyAccumulate","divide","__absoluteCompare","quotient","resultSign","divisor","__absoluteDivSmall","__absoluteDivLarge","remainder","remainderDigit","__absoluteModSmall","add","__absoluteAdd","__absoluteSub","subtract","leftShift","__rightShiftByAbsolute","__leftShiftByAbsolute","signedRightShift","unsignedRightShift","lessThan","__compareToBigInt","lessThanOrEqual","greaterThan","greaterThanOrEqual","equal","notEqual","bitwiseAnd","__absoluteAnd","y1","__absoluteOr","_ref","__absoluteAndNot","bitwiseXor","__absoluteXor","_ref2","bitwiseOr","_ref3","asIntN","neededLength","topDigit","compareDigit","hasBit","__truncateToNBits","__truncateAndSubFromPowerOfTwo","asUintN","bitsInTopDigit","ADD","__toNumeric","__isBigInt","LT","__compare","LE","GT","GE","EQ","__equalToNumber","NE","DataViewGetBigInt64","dataview","byteOffset","littleEndian","DataViewGetBigUint64","_ref4","_ref5","_slicedToArray","h","l","getUint32","low","DataViewSetBigInt64","DataViewSetBigUint64","d1","_ref6","_ref7","setUint32","mantissaBitsUnset","topUnconsumedBit","mask","rawExponent","digits","kHiddenBit","kMantissaHighTopBit","msdTopBit","remainingMantissaBits","__isWhitespace","c","string","cursor","charCodeAt","chars","bitsPerChar","__kMaxBitsPerChar","roundup","__kBitsPerCharTableMultiplier","bitsMin","__kBitsPerCharTableShift","limDigit","limAlpha","parts","partsBits","part","bits","__fillFromParts","charsSoFar","m","digitsSoFar","bitsInDigit","partBits","charMask","bitLength","charsRequired","Array","pos","availableBits","newDigit","__kConversionChars","consumedBits","isRecursiveCall","maxBitsPerChar","minBitsPerChar","secondHalf","secondHalfChars","conqueror","input","divisionResult","firstHalf","__unequalSign","leftNegative","__absoluteGreater","bothNegative","__absoluteLess","xSign","__compareToNumber","ySign","yAbs","xDigit","__compareToDouble","yBitLength","compareMantissa","__comparisonResultToBool","op","r","inputLength","yLength","numPairs","tmp","tmpLength","diff","multiplicand","accumulator","accumulatorIndex","m2Low","m2High","acc","m1","m1Low","m1High","rLow","rMid1","rMid2","rHigh","__internalMultiplyAdd","source","factor","rx","ry","upperHalf","lowerHalf","dividend","wantQuotient","wantRemainder","n2","q","qhatv","__clz15","__specialLeftShift","u","vn1","halfDigitBuffer","j","qhat","ujn","rhat","vn2","ujn2","addDigit","__toShiftAmount","digitShift","bitsShift","grow","__rightShiftByMaximum","mustRoundDown","roundingCanOverflow","obj","hint","Symbol","toPrimitive","call","drop","o","min","limit","resultMsd","msdBitsConsumed","minuendMsd","__digitPow","base","__detectBigEndian","_wrapNativeSuper","__kBitConversionBuffer","ArrayBuffer","Float64Array","Int32Array","LN2","log","a","b"],"mappings":"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"}